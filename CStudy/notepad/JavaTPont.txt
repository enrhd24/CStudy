What is a compilation?
Source code
  -> expanded code
1. Proprocessor
  -> assembly code
2. Compiler
  -> object code
3. Assembler
  -> Other object files
  -> Libraries
4. Linker
  -> executable code
5. Loader_[Execution]

Types of Variables in C
1. local Variable_지역변수
2. Global Variable_클로벌변수
3. Static Variable_정적 변수
4. Automatic Variable_자동 변수
5. External Variable_외부 변수

Data Types in C
1. Basic        -> int, char, float, double
2. Derived      -> array, pointer, structure, union
3. Enumeration  -> enum
4. Void         -> void

Types of identifiers
1. Internal identifier[내부 식별자] -> 지역 변수
2. External idenrifier[외부 식별자] -> 함수이름, 전역변수

Comments in C
1. Single-Line Comments -> //
2.  Multi-Line Comments -> /* */

C Format Specifier[형식 지정자] -> 문자열 리터럴이나 나타내지 않는 일련의 문자
Escape Sequence in Comments[이스케이프 시퀀스]

Constants in C
1. List of constants in C
2. 2 ways to define constant in C 
          [const keyword] -> const float PI = 3.14;
   [#define preprocessor] -> #define preprocessor

What are literals
-> 상수 변수에 할당된 상수 값 - 수정할 수 없는 고정 값을 나타낸다.
-> 메모리를 포함하지만, 변수로 참조하지 않는다 - const int = 10; [정수 리터럴 인 상수 정수 식]
1. Integer literal -> const int a = 23;
2. Float literal -> const float b = 5.6;
3. Character literal -> const char x = 'ak';
4. String literal -> String1 = "javapoint' + "family"

Tokens in C
-> C에서 프로그램을 만드는 데 사용되는 가장 중요한 요소
-> C언어로 프로그램을 만들기 위한 빌딩 블록 or 기본 구성 요소
- Keywords 
- Identifiers [변수, 함수, 배열, 구조 등 이름을 지정하는 데 사용]
- Strings [문자열 끝에 null문자 '\0'이 있는 문자 배열]
- Operators [기능을 수행하는 데 사용되는 특수 기호 - 연산자,피연산자]
            [단항 연산자(증가, 감소, sizeof), 이진 연산자(산술, 관걔. 비트, etc..)]
- Constant [정수, 부동소수점, 8진수, 16진수, 문자, 문자열열]
- Special Characters [대괄호, 괄호, 쉼표, 전처리기,별표,물결표, 마침표, etc..]

C Boolean
#include <stdio.h>
#include <stdbool.h>

int main(){
    // Syntax
    bool x = false;
    if(x == true){printf("The value if x is true\n");}
    else{printf("The value of x is FALSE\n");}

    //Boolean Array
    bool b[2] = {true, false};
    for(int i = 0; i < 2; i++){
        printf("%d ",b[i]);
    }
    printf("\n");
    
    // Logical Operators
    bool f = 0;
    bool t = 1;
    printf("The value if x&&y is %d\n",f&&t);
    printf("The value if x||y is %d\n",f||t);
    printf("The value if !x is %d\n",!f);
    return 0;
}

Static in C
1. Static gloval Variable -> 프로그램 전체 스코프
2. Statuc function -> 수명은 프로그램 전체에 걸쳐있다.
3. Static member Variable 
    -> 정적 지역 변수를 수정시 수정된 값을 다음 호출에도 사용할 수 있다.
4. Static member Variables
    -> 특정 인스턴스가 아닌 클래스의 모든 인스턴스에서 액세스 가능
5. Static method
    -> 정적 키워드로 선언된 클래스의 멤버 함수를 의미한다.

Programming Errors in C
1. Syntax Errors -> 디버깅 or 컴파일러에서 발생한다.
2. Run-time Errors -> 프로그램이 실행 중일 때 작업을 수행할 수 없는 경우 
3. Linker Errors -> 잘못된 함수 및 헤더 파일 사용시 링커 오류 발생한다.
4. Logical Errors -> 개발자의 논리적 사고가 훌륭하게 틀리면, 발생가능성이 줄어든다.
5. Semantic Errors -> 컴파일러가 명령문을 이해할 수 없을 때 발생하는 오류

Compile time Vs Runtime
Compile time(Syntax error , Semantic error) 
-> 서스 코드가 실행 가능한 코드로 변환되는 시간

Runtime(싱행 중 및 컴파일 후에 발생하는 오류 ex> 0으로 나누기)
-> 실행 가능한 코드가 실행되기 시작하는 시간
int main(){
  int a = 20;  int b = a/0;
  printf("The value of b is : %d",b);
}