1. Array
2. Linked List

배열
-정적배열(오버플로우 방지 못함)
-동적배열(오버플로우 방지 가능)

크기 -> 고정적, 동적
물리적 저장(주소) -> 순차적, 랜덤
접근속도 -> O(1), O(n)
삽입/삭제 -> 비효율적, 효율적

배열
-> 가장 기본적인 자료구조 중 하나
-> 복수의 데이터들을 하나로 묶어 사용하기 위해 사용된다.

정적배열(Static Array)
-> 사용하지 않는 연속적인 메모리를 예약하고 시작한다.
-> 데이터 저장 전에 배열을 먼저 선언한 후 사용한다.
int numArray[4];
// 하나당 4바이트씩 16바이트만큼의 연속적인 메모리를 미리 예약
     이후, 정의된 배열에 데이터를 추가해주는 방식_[배열을 완성]
Search[O(1)] - Insert[O(n)]

추가와 삭제가 불가능한 이유
1. DataType 형태의 데이터만 저장하기 때문에 None,Null 안됨.
2. 데이터를 덮어쓸 경우 제한된 공간때문에 삭제하고 볼 수 없음. 

동적배열(Dynamic array)
-> 정적배열의 데이터 삭제와 추가를 가능하게 하는 방법
-> 현재 공간외 데이터가 들어올 경우
    새로 입력된 데이터를 그대로 가져와 저장하는 방식으로 작동
// 데이터가 추가되면 데이터의 
     메모리 용량에 따라 더 긴 배열을 만들면, 그만이기 때문이다.

내부적으로 정적배열을 사용하고 있기 때문에
데이터접근, 탐색은 Static Array의 시간복잡도와 같다.
1) [추가]배열의 길이를 늘려줄 필요가 없을 때 -> O(1)
2) [추가]배열의 길이를 늘려줄 필요가 있을 때 -> O(n)
[삭제] 해당 인덱스 접근을 막고, 일련의 과정으로 메모리삭제함.
1) [삭제] 맨 뒤의 값을 삭제할 때 -> O(1)
2) [삭제]  중간의 값을 삭제 할 때 -> O(n)[데이터 개수 {N-1}]
-----------------------------------------------------------------

연결리스트
-> 각각의 노드는 데이터와 포인터를 가진 상태
-> 한줄로 연결되어 있는 방식
-> 다음 노드를 가리키는 포인터는 "다음 노드의 주소"를 값으로 가짐.
   각 노드의 포인터 변수는 데이터 주소를 값과 포인터 변수의 주소도 따로 존재.

   단순연결리스트 -> 하나의 방향연결 , 링크 필드는 NULL
   원형연결리스트 -> 마지막 노드의 링크 값
   이중연결리스트
   
   노드 = Data(데이터 필드) , Link(링크 필드)
   데이터 필드 -> 데이터, 정수, 구조체가 될 수 있다.
   링크 필드 -> 다른 노드를 가리키는 정보[포인터 변수]
               현재 노드에 연결되어 있는 다음 노드가 어떤 노드인지 알 수 있는 것

   해드 포인터
   -> 연결리스트의 첫번째 노드의 주소를 저장하는 포인터
   -> 모든 녿들에 순차적으로 접근할 수 있어 반드시 헤드 포인터 주소를 알아야 한다.
   -> 더 이상 연결할 노드가 없을 때, NULL로 설정하여 마지막 노드임을 표현한다.

   연결리스트 특징
   -> 어느 곳에나 위치할 수 있다.
   -> 인접한 노드라고 해서 인접한 메모리에 있는 것이 아니다.
   -> 데이터 저장 및 동적으로 노드를 생성해서 연결하기 때문에 링크 필드를 위한 추가 공간이 필요
   -> 동적할당과 해제가 빈번하게 일어나면 [메모리 관리]를 위한 
      처리시간이 길어져 프로그램이 느려질 수 있다.

   인접한 노드[인접하다 - 가까이 있거나 바로 이웃하여 있다.]
   -> 연결된 목록이 주어지면 인접한 노드를 쌍으로 교환합니다.
   -> 데이터 교환은 허용되지 않으며 링크만 변경되어야 합니다.
   -> 연결된 목록을 탐색하고, 두 노드를 고려하여 링크를 교환하는 것이다.
      단, 교환하는 동안 특별한 주의가 필요합니다.

   ---

배열(Array) and 링크드리스트(LinkedList) 차이
   메모리상에 데이터를 저장하는 방식이 다르다 
   -> Ara  = 데이터를 메모리 상에 연속적으로 저장
   -> Link = 다음 데이터의 주소에 정보를 갖게함.

   LinkedList 
   -> 데이터를 연결시켜 접근,추가,삭제 및 연산을 가능한 리스트

   advantage
   1. 데이터에 대한 접근   - array 우위
   2. 데이터 삽입 및 삭제  - LinkedList 우위
   3. 메모리상의 공간낭비 - LinkedList 우위

   Result
   -> 데이터의 접근시 Using Array
   -> 데이터의 변경시 Using LinkedList

