OpenCV 라이브러리를 활용한 디지털 영상처리 기초
- 멀티미디어 공학 [과목]
- 영상처리 및 패턴인식 [과목]

선수지식
- C 프로그래밍
- C++ 객체지향 프로그래밍

01. 디지털 영상처리 개요

```
- Computer Imaging 소개
 : 컴퓨터에 의해서 시각적인 정보를 획득하고 처리하는 분야
  : 컴퓨터비전, 이미지 프로세싱 -> imsge analysis
- Pattern Recognition 개요 [패턴인식]
 : 입력 오브젝트를 주어진 알고리즘에 따라 카테고리나 클래스로
     분류하는 과정
  : 이미지 개선 - 이미지 분할 - 특징추출 - 패턴분할 
- Image Processing 개요 [이미지 프로세싱]
 : 인간이 사용하기 평하도록 컴퓨터를 사용하여 기존 영상을 개선 및 수정하는 분야
  : 이미지개선, 이미지 분류, 이미지 변환, 이미지 압축
```

Computer Imaging
: 컴퓨터에 의해서 시각적인 정보[동영상] 획득하고 처리하는 분야

응용 분야
1. 컴퓨터 분야         by Computer
2. 이미지 프로세싱   by Human
3. Image Analysis [컴퓨터 분야 ^ 이미지 프로세싱]
-> 컴퓨터 분야와 이미지 프로세싱의 이미지를 공유하는 분야


Related Fields to Image Computing
1. Computer Grphics
description[알고리즘] --Computer Grahics-> image[결과물]

*Computer Grahics
: description으로 부터 이미지를 생성을 해내는 분야
*descripting
: 선 또는 도형 그리고 도형을 채우는 "알고리즘"

2. Image processing
Image -- Image Processing -> Image

입력과 출력의 이미지
입력 이미지 : 낮은 퀄리티, 목적에 맞지 않는 이미지 및 입력 영상
[Image Processing] 
출력 이미지 : 높은 쿼리티, 목적에 맞는        이미지 및 입력 영상


3. Computer Vision
Image -- Computer Vision -> description

입력은 영상으로 사용하여
결과는 description[단어, 문장, 이미지를 선정(사람이 볼 수 있는)]



Pattern Recognition[패턴 인식]
입력 오브젝트를 주어진 알고리즘에 따라 카테고리나 클래스로 분류하는 과정
1. 무슨 과일인가?  ,  2. 무슨 글자인가?  ,  3. 정상인가?

pattern recognition절차
1. image enhancement         [이미지 개선]
2. image segmentation         [영상 분할]
3. feature extraction     [특징 추출]_특징
4. pattern classification [패턴 분류]_바나나

x축 y축에 해당하는 color축과 thinness ratio 축


Image Processing [이미지 프로세싱]
인간이 사용하기 편하도록 컴퓨터를 사용하여 기존 영상을 개선하거나 수정하는 학문 분야

1. 이미지 개선[image enhancement] ex> 선명도, 화질개선
2. 이미지 분할[image segmentation] ex> 영역, 오브젝트 단위로 구분
3. 이미지 변환[image transforms] ex> 수학적 변환수식으로 또 다른으로 변환으로 바꾸는 것
    - image -- FFT[임벌스FFT]  , FFT -- image[역FFT]
4. 이미지 압축[image compression] ex>영상이 가지고 있는 불필요한 영역을 삭제하여 용량을 줄이는 것

-------------------------------------------------------------------------------------------

02. 디지털 이미지[Digital Images]

```
영상 신호의 디지털화 과정
: Sampling -> Quantization -> Coding
디지털 영상(bitmap)의 표현방법
: bitmap -> I(x,y)
디지털 영상(bitmap)의 종류
: binary, gray-scale, color, multi-soectral images
```

영상 신호의 디지털화 과정
1. Sampling 샘플링 --> 해상도와 관련이 있음.
  : 아날로그 데이터를 일정한 간격으로 데이터를 취하는 과정
  : 시간적인 축으로 일정한 간격으로 데이터를 취하는 과정
  : Spatial samples[공간적인 샘플]_공간을 일정한 간격으로 데이터를 취하는 과정
  // pixel, picture element, pel , dpi[도트]
2. Quantizing 양자화
  : 각각이 픽셀이 가지고 있는 밝기의 단계를 나누는 것
  : Levels[단계들의 차이] 10 vs 20 vs 40 Levels
3. Coding 코딩
  : 각각의 픽셀로 나타내는 부분을 이진화하여 파일에 저장하는 것
  : 각각의 픽셀을 부호화시켜서 파일에 담겨지게된다.
  : 하지만, 파일의 용량을 줄이기 위해 바이너리 파일을 압축한다.


디지털 영상의 표현 방법
1. 영상 좌표(x,y) - 데카르트 좌표계
2. 행렬 위치(r,c) - row, colums

I(x,y) [행렬을 하나의 함수로 표현]
x,y : spatial corrdinates
I : intensity(gray level) -> 픽셀이 가지고 있는 밝기 값


디지털 영상의 종류
1. binary image
  : 1 bit / pixel [0 or 1]
  : 중간 결과 영상 연산할 때 사용하는 것
2. grayscale Image
  : typically 8 bit / pixel [0 ~ 255]
3. color image
  : typically 24 bit - pixel
  : R[0~255] + G[0~255] + B[0~255] = 24bit
  LookUp Table(LUT)
  -> 추가적인 데이터인 행의 위치를 나타내는 (RGB)
4. multi-soectral image
   : 눈으로 볼 수 없는 부분을 중첩을 통해 사진으로 시각화하는 작업
   ex> [일기예보] 가시광선, 적외선, 파장의 종류 등등...

-------------------------------------------------------------------------------------------

03. BMP 파일 이해

```
BMP 파일의 구조
1. Header of BMP -> File Header,Bitmap Info. Header, LUT
2. Image Data
BMP 파일의 특징
1. 한 행의 데이터는 4바이트의 배수
2. 상하반전된 데이터
// (x,y) => [widthStep * (height -y -1) + x]
```

BMP 파일의 구조
- Headers of BMP
1. File Header [구조체 : bitmapfileheader]
2. Bitmap Info. Header [RGB : bitmapinforheader]
3. LUT [이미피 파일에 따라 필요할 수도 필요 없을 수도 있음]

1-1. typedef struct tag{
  WORD bgTYPE;
  DWORD bfSize;
} bitmapfileheader;

1-2. typedef struct tag{
  LONG biPlanes;
  DWORD biCLrUSed;
  WORK biBitCount;
} BITAPINFOTHADER;

1-3. typedef struct tag{
  BYTE rgbBlue;
  BYTE rgbGreed
} RGVColor;


- Image Data

ex> true color image [색상 이미지] 
1. File Header
   파일해더의 식별자는 첫번째 16진수 숫자
   이 파일이 BMP파일일지 알수 있는 열쇠인 것.
2. Bitmap Info. Header
2. LookUpTable

ec> gray-scale image
1. File Header
2. Bitmap Info. Header
3. LookUpTable : LUT을 사용하지 않는다.

// 상하반전된 상태로 이미지가 저장되었기 때문에 
   픽셀의 위치에 나타내는 형태가 다릅니다.


BMP 파일의 특징

2차원 배열 : Data 
: A => data[width][height]

1차원 배열 : data
: a => data[length]
: lenght => 1 * widh + height
// (x,y) => [width * y + x]

ex> 150 * 50 8bit gray-scale image 
    : (x, y) = (2, 1) ? 152
    = width * 1 + 2 == width -> 150
  * 각 행의 데이터틑 4byte의 배수로 저장함.
  따라서 [154] = [(152) * 1 + 2]가 되어야 한다.
// 즉, width => widthStep = ((width +3)/4)*4
   그리고, 올림연산이 되어야 한다.

정리 : (x,y) => [widthStep * y + x]


Vertical Flip
: 이미지 데이터가 첫번째 행부터 들어가 있는 것이 아닌,
  상하반전이 되어 저장되어져 있고, 
  가장 먼저 만나는 행은 가장 마지막 행이다.
: 가장 마지막 행은 "height -1"
: 가장 첫번째 행은 "0"
// (x,y) => [widthStep * (height-y-1) + x]
   -> 상화반전된 값까지 생각을 해줘야 함.
   -> widthStep 역시 생각을 해줘야 함.



